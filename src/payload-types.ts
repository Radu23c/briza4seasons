/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    homepage: Homepage;
    'about-us-page': AboutUsPage;
    'villa-complex-page': VillaComplexPage;
    locationPage: LocationPage;
    'gallery-page': GalleryPage;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    homepage: HomepageSelect<false> | HomepageSelect<true>;
    'about-us-page': AboutUsPageSelect<false> | AboutUsPageSelect<true>;
    'villa-complex-page': VillaComplexPageSelect<false> | VillaComplexPageSelect<true>;
    locationPage: LocationPageSelect<false> | LocationPageSelect<true>;
    'gallery-page': GalleryPageSelect<false> | GalleryPageSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title?: string | null;
  hero?: {
    type?: ('none' | 'highImpact' | 'mediumImpact' | 'lowImpact') | null;
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (string | null) | Media;
  };
  layout?: (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title?: string | null;
  heroImage?: (string | null) | Media;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form?: (string | null) | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navItems?:
    | {
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: string;
  heroSection?: {
    /**
     * Show/hide hero section
     */
    isActive?: boolean | null;
    /**
     * Main heading text in Romanian
     */
    mainHeadingRo?: string | null;
    /**
     * Main heading text in English
     */
    mainHeadingEn?: string | null;
    /**
     * Main heading text in Hebrew
     */
    mainHeadingHe?: string | null;
    ctaButton?: {
      textRo?: string | null;
      textEn?: string | null;
      textHe?: string | null;
      link?: string | null;
    };
    projectNameRo?: string | null;
    projectNameEn?: string | null;
    projectNameHe?: string | null;
    projectSubtitleRo?: string | null;
    projectSubtitleEn?: string | null;
    projectSubtitleHe?: string | null;
    backgroundImage?: (string | null) | Media;
  };
  featuresSection?: {
    /**
     * Show/hide features section
     */
    isActive?: boolean | null;
    projectNameRo?: string | null;
    projectNameEn?: string | null;
    projectNameHe?: string | null;
    villaCount?: number | null;
    villaCountTextRo?: string | null;
    villaCountTextEn?: string | null;
    villaCountTextHe?: string | null;
    mainHeadingRo?: string | null;
    mainHeadingEn?: string | null;
    mainHeadingHe?: string | null;
    accentTextRo?: string | null;
    accentTextEn?: string | null;
    accentTextHe?: string | null;
    subHeadingRo?: string | null;
    subHeadingEn?: string | null;
    subHeadingHe?: string | null;
    detailsTextRo?: string | null;
    detailsTextEn?: string | null;
    detailsTextHe?: string | null;
    exteriorImage?: (string | null) | Media;
    interiorImage?: (string | null) | Media;
    detailsLink?: string | null;
  };
  featuresOverviewSection?: {
    /**
     * Show/hide features overview section
     */
    isActive?: boolean | null;
    titleRo?: string | null;
    titleEn?: string | null;
    titleHe?: string | null;
    featureItems?:
      | {
          order?: number | null;
          icon?: ('sofa' | 'house' | 'car' | 'tree' | 'shield' | 'wifi' | 'heart' | 'star') | null;
          titleRo?: string | null;
          titleEn?: string | null;
          titleHe?: string | null;
          descriptionRo?: string | null;
          descriptionEn?: string | null;
          descriptionHe?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: (string | null) | Media;
    backgroundImageAltRo?: string | null;
    backgroundImageAltEn?: string | null;
    backgroundImageAltHe?: string | null;
  };
  benefitsSection?: {
    /**
     * Show/hide benefits section
     */
    isActive?: boolean | null;
    sectionTitleRo?: string | null;
    sectionTitleEn?: string | null;
    sectionTitleHe?: string | null;
    benefits?:
      | {
          benefitRo?: string | null;
          benefitEn?: string | null;
          benefitHe?: string | null;
          id?: string | null;
        }[]
      | null;
    mainImage?: (string | null) | Media;
    /**
     * Background color (hex code)
     */
    backgroundColor?: string | null;
    /**
     * Text color (hex code)
     */
    textColor?: string | null;
  };
  faqSection?: {
    /**
     * Show/hide FAQ section
     */
    isActive?: boolean | null;
    sectionTitleRo?: string | null;
    sectionTitleEn?: string | null;
    sectionTitleHe?: string | null;
    mainHeadingRo?: string | null;
    mainHeadingEn?: string | null;
    mainHeadingHe?: string | null;
    faqItems?:
      | {
          questionRo?: string | null;
          questionEn?: string | null;
          questionHe?: string | null;
          answerRo?: string | null;
          answerEn?: string | null;
          answerHe?: string | null;
          id?: string | null;
        }[]
      | null;
    backgroundImage?: (string | null) | Media;
  };
  contactSection?: {
    /**
     * Show/hide contact section
     */
    isActive?: boolean | null;
    formTitleRo?: string | null;
    formTitleEn?: string | null;
    formTitleHe?: string | null;
    nameFieldRo?: string | null;
    nameFieldEn?: string | null;
    nameFieldHe?: string | null;
    emailFieldRo?: string | null;
    emailFieldEn?: string | null;
    emailFieldHe?: string | null;
    phoneFieldRo?: string | null;
    phoneFieldEn?: string | null;
    phoneFieldHe?: string | null;
    messageFieldRo?: string | null;
    messageFieldEn?: string | null;
    messageFieldHe?: string | null;
    submitButtonRo?: string | null;
    submitButtonEn?: string | null;
    submitButtonHe?: string | null;
    backgroundImage?: (string | null) | Media;
  };
  gallerySection?: {
    /**
     * Show/hide gallery section
     */
    isActive?: boolean | null;
    sectionTitleRo?: string | null;
    sectionTitleEn?: string | null;
    sectionTitleHe?: string | null;
    sectionSubtitleRo?: string | null;
    sectionSubtitleEn?: string | null;
    sectionSubtitleHe?: string | null;
    /**
     * Add as many images as you want to showcase your complex
     */
    galleryImages?:
      | {
          /**
           * Upload an image of your complex
           */
          image?: (string | null) | Media;
          caption?: {
            /**
             * Optional caption in Romanian
             */
            captionRo?: string | null;
            /**
             * Optional caption in English
             */
            captionEn?: string | null;
            /**
             * Optional caption in Hebrew
             */
            captionHe?: string | null;
          };
          /**
           * Order of appearance (optional, defaults to upload order)
           */
          order?: number | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Enable lightbox/modal view when clicking images
     */
    enableLightbox?: boolean | null;
  };
  imageGallerySection?: {
    /**
     * Show/hide image gallery section
     */
    isActive?: boolean | null;
    /**
     * Main title (first part) in Romanian
     */
    mainTitleRo?: string | null;
    /**
     * Main title (first part) in English
     */
    mainTitleEn?: string | null;
    /**
     * Main title (first part) in Hebrew
     */
    mainTitleHe?: string | null;
    /**
     * Subtitle (colored part) in Romanian
     */
    subtitleRo?: string | null;
    /**
     * Subtitle (colored part) in English
     */
    subtitleEn?: string | null;
    /**
     * Subtitle (colored part) in Hebrew
     */
    subtitleHe?: string | null;
    /**
     * Description text in Romanian
     */
    descriptionRo?: string | null;
    /**
     * Description text in English
     */
    descriptionEn?: string | null;
    /**
     * Description text in Hebrew
     */
    descriptionHe?: string | null;
    /**
     * Add as many images as you want - they will display in a 4-column grid
     */
    images?:
      | {
          /**
           * Upload an image for the gallery
           */
          image?: (string | null) | Media;
          caption?: {
            /**
             * Optional caption in Romanian
             */
            captionRo?: string | null;
            /**
             * Optional caption in English
             */
            captionEn?: string | null;
            /**
             * Optional caption in Hebrew
             */
            captionHe?: string | null;
          };
          /**
           * Order of appearance (optional, defaults to upload order)
           */
          order?: number | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Enable lightbox/modal view when clicking images
     */
    enableLightbox?: boolean | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-us-page".
 */
export interface AboutUsPage {
  id: string;
  heroSection?: {
    /**
     * Show/hide hero section
     */
    isActive?: boolean | null;
    /**
     * Main hero title in Romanian
     */
    mainTitleRo?: string | null;
    /**
     * Main hero title in English
     */
    mainTitleEn?: string | null;
    /**
     * Main hero title in Hebrew
     */
    mainTitleHe?: string | null;
    /**
     * Hero subtitle in Romanian
     */
    subtitleRo?: string | null;
    /**
     * Hero subtitle in English
     */
    subtitleEn?: string | null;
    /**
     * Hero subtitle in Hebrew
     */
    subtitleHe?: string | null;
    /**
     * Hero background image
     */
    backgroundImage?: (string | null) | Media;
    breadcrumbs?:
      | {
          labelRo?: string | null;
          labelEn?: string | null;
          labelHe?: string | null;
          href?: string | null;
          /**
           * Is this the current page?
           */
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  aboutContentSection?: {
    /**
     * Show/hide about content section
     */
    isActive?: boolean | null;
    /**
     * Section title in Romanian
     */
    sectionTitleRo?: string | null;
    /**
     * Section title in English
     */
    sectionTitleEn?: string | null;
    /**
     * Section title in Hebrew
     */
    sectionTitleHe?: string | null;
    /**
     * Main heading in Romanian
     */
    mainHeadingRo?: string | null;
    /**
     * Main heading in English
     */
    mainHeadingEn?: string | null;
    /**
     * Main heading in Hebrew
     */
    mainHeadingHe?: string | null;
    contentParagraphs?:
      | {
          /**
           * Paragraph content in Romanian
           */
          paragraphRo?: string | null;
          /**
           * Paragraph content in English
           */
          paragraphEn?: string | null;
          /**
           * Paragraph content in Hebrew
           */
          paragraphHe?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Images for the overlapping layout (2-4 images recommended)
     */
    images?:
      | {
          image?: (string | null) | Media;
          /**
           * Alt text in Romanian
           */
          altTextRo?: string | null;
          /**
           * Alt text in English
           */
          altTextEn?: string | null;
          /**
           * Alt text in Hebrew
           */
          altTextHe?: string | null;
          /**
           * Display order (1 = front, higher numbers = behind)
           */
          order?: number | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "villa-complex-page".
 */
export interface VillaComplexPage {
  id: string;
  heroSection?: {
    /**
     * Show/hide hero section
     */
    isActive?: boolean | null;
    /**
     * Main hero title in Romanian
     */
    mainTitleRo?: string | null;
    /**
     * Main hero title in English
     */
    mainTitleEn?: string | null;
    /**
     * Main hero title in Hebrew
     */
    mainTitleHe?: string | null;
    /**
     * Hero subtitle in Romanian
     */
    subtitleRo?: string | null;
    /**
     * Hero subtitle in English
     */
    subtitleEn?: string | null;
    /**
     * Hero subtitle in Hebrew
     */
    subtitleHe?: string | null;
    /**
     * Hero background image
     */
    backgroundImage?: (string | null) | Media;
    breadcrumbs?:
      | {
          labelRo?: string | null;
          labelEn?: string | null;
          labelHe?: string | null;
          href?: string | null;
          /**
           * Is this the current page?
           */
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  villaComplexContentSection?: {
    /**
     * Show/hide villa complex content section
     */
    isActive?: boolean | null;
    /**
     * Section title in Romanian
     */
    sectionTitleRo?: string | null;
    /**
     * Section title in English
     */
    sectionTitleEn?: string | null;
    /**
     * Section title in Hebrew
     */
    sectionTitleHe?: string | null;
    /**
     * Main heading in Romanian
     */
    mainHeadingRo?: string | null;
    /**
     * Main heading in English
     */
    mainHeadingEn?: string | null;
    /**
     * Main heading in Hebrew
     */
    mainHeadingHe?: string | null;
    contentParagraphs?:
      | {
          /**
           * Paragraph content in Romanian
           */
          paragraphRo?: string | null;
          /**
           * Paragraph content in English
           */
          paragraphEn?: string | null;
          /**
           * Paragraph content in Hebrew
           */
          paragraphHe?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Images for the overlapping layout (2-4 images recommended)
     */
    images?:
      | {
          image?: (string | null) | Media;
          /**
           * Alt text in Romanian
           */
          altTextRo?: string | null;
          /**
           * Alt text in English
           */
          altTextEn?: string | null;
          /**
           * Alt text in Hebrew
           */
          altTextHe?: string | null;
          /**
           * Display order (1 = front, higher numbers = behind)
           */
          order?: number | null;
          id?: string | null;
        }[]
      | null;
  };
  floorPlansSection?: {
    /**
     * Show/hide floor plans section
     */
    isActive?: boolean | null;
    /**
     * Section title (first part) in Romanian
     */
    sectionTitleRo?: string | null;
    /**
     * Section title (first part) in English
     */
    sectionTitleEn?: string | null;
    /**
     * Section title (first part) in Hebrew
     */
    sectionTitleHe?: string | null;
    /**
     * Section subtitle (colored part) in Romanian
     */
    sectionSubtitleRo?: string | null;
    /**
     * Section subtitle (colored part) in English
     */
    sectionSubtitleEn?: string | null;
    /**
     * Section subtitle (colored part) in Hebrew
     */
    sectionSubtitleHe?: string | null;
    /**
     * Section description in Romanian
     */
    sectionDescriptionRo?: string | null;
    /**
     * Section description in English
     */
    sectionDescriptionEn?: string | null;
    /**
     * Section description in Hebrew
     */
    sectionDescriptionHe?: string | null;
    /**
     * Configure the 4 villa types (Spring, Summer, Autumn, Winter)
     */
    villas?:
      | {
          /**
           * Select the villa season type (each must be unique)
           */
          villaType: 'spring' | 'summer' | 'autumn' | 'winter';
          /**
           * Villa name in Romanian
           */
          nameRo: string;
          /**
           * Villa name in English
           */
          nameEn: string;
          /**
           * Villa name in Hebrew
           */
          nameHe: string;
          /**
           * Floor plans for this villa type
           */
          floorPlans?:
            | {
                /**
                 * Display order (1 = first tab, 2 = second tab, etc.)
                 */
                order?: number | null;
                /**
                 * Floor name in Romanian (e.g., PARTER, ETAJ)
                 */
                floorNameRo?: string | null;
                /**
                 * Floor name in English (e.g., GROUND FLOOR, FLOOR)
                 */
                floorNameEn?: string | null;
                /**
                 * Floor name in Hebrew
                 */
                floorNameHe?: string | null;
                /**
                 * Floor plan image
                 */
                floorPlanImage?: (string | null) | Media;
                /**
                 * Floor plan image alt text in Romanian
                 */
                floorPlanImageAltRo?: string | null;
                /**
                 * Floor plan image alt text in English
                 */
                floorPlanImageAltEn?: string | null;
                /**
                 * Floor plan image alt text in Hebrew
                 */
                floorPlanImageAltHe?: string | null;
                /**
                 * Built area in square meters
                 */
                builtArea?: number | null;
                /**
                 * Usable area in square meters
                 */
                usableArea?: number | null;
                /**
                 * Built area label in Romanian
                 */
                builtAreaLabelRo?: string | null;
                /**
                 * Built area label in English
                 */
                builtAreaLabelEn?: string | null;
                /**
                 * Built area label in Hebrew
                 */
                builtAreaLabelHe?: string | null;
                /**
                 * Usable area label in Romanian
                 */
                usableAreaLabelRo?: string | null;
                /**
                 * Usable area label in English
                 */
                usableAreaLabelEn?: string | null;
                /**
                 * Usable area label in Hebrew
                 */
                usableAreaLabelHe?: string | null;
                /**
                 * Add room details with areas
                 */
                roomDetails?:
                  | {
                      /**
                       * Room name in Romanian
                       */
                      roomNameRo?: string | null;
                      /**
                       * Room name in English
                       */
                      roomNameEn?: string | null;
                      /**
                       * Room name in Hebrew
                       */
                      roomNameHe?: string | null;
                      /**
                       * Room area in square meters
                       */
                      roomArea?: number | null;
                      id?: string | null;
                    }[]
                  | null;
                pdfDownload?: {
                  /**
                   * PDF button text in Romanian
                   */
                  buttonTextRo?: string | null;
                  /**
                   * PDF button text in English
                   */
                  buttonTextEn?: string | null;
                  /**
                   * PDF button text in Hebrew
                   */
                  buttonTextHe?: string | null;
                  /**
                   * PDF file for download
                   */
                  pdfFile?: (string | null) | Media;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  facilitiesSection?: {
    /**
     * Show/hide facilities section
     */
    isActive?: boolean | null;
    /**
     * Section title in Romanian
     */
    sectionTitleRo?: string | null;
    /**
     * Section title in English
     */
    sectionTitleEn?: string | null;
    /**
     * Section title in Hebrew
     */
    sectionTitleHe?: string | null;
    /**
     * Background image for the facilities section
     */
    backgroundImage?: (string | null) | Media;
    /**
     * Background image alt text in Romanian
     */
    backgroundImageAltRo?: string | null;
    /**
     * Background image alt text in English
     */
    backgroundImageAltEn?: string | null;
    /**
     * Background image alt text in Hebrew
     */
    backgroundImageAltHe?: string | null;
    /**
     * Add as many facilities as you want
     */
    facilities?:
      | {
          /**
           * Display order (01, 02, 03, etc.)
           */
          order?: number | null;
          /**
           * Facility title in Romanian
           */
          titleRo?: string | null;
          /**
           * Facility title in English
           */
          titleEn?: string | null;
          /**
           * Facility title in Hebrew
           */
          titleHe?: string | null;
          /**
           * Optional description in Romanian
           */
          descriptionRo?: string | null;
          /**
           * Optional description in English
           */
          descriptionEn?: string | null;
          /**
           * Optional description in Hebrew
           */
          descriptionHe?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locationPage".
 */
export interface LocationPage {
  id: string;
  heroSection?: {
    backgroundImage?: (string | null) | Media;
    breadcrumbs?: {
      homeTextRo?: string | null;
      homeTextEn?: string | null;
      homeTextHe?: string | null;
      currentPageTextRo?: string | null;
      currentPageTextEn?: string | null;
      currentPageTextHe?: string | null;
      href?: string | null;
    };
    titleRo?: string | null;
    titleEn?: string | null;
    titleHe?: string | null;
    subtitleRo?: string | null;
    subtitleEn?: string | null;
    subtitleHe?: string | null;
  };
  locationSection?: {
    address?: string | null;
    decorativeTextRo?: string | null;
    decorativeTextEn?: string | null;
    decorativeTextHe?: string | null;
    headingRo?: string | null;
    headingEn?: string | null;
    headingHe?: string | null;
    descriptionRo?: string | null;
    descriptionEn?: string | null;
    descriptionHe?: string | null;
    nearbyPlaces?:
      | {
          nameRo?: string | null;
          nameEn?: string | null;
          nameHe?: string | null;
          distance?: string | null;
          id?: string | null;
        }[]
      | null;
    ctaButton?: {
      textRo?: string | null;
      textEn?: string | null;
      textHe?: string | null;
      link?: string | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-page".
 */
export interface GalleryPage {
  id: string;
  heroSection?: {
    /**
     * Show/hide hero section
     */
    isActive?: boolean | null;
    /**
     * Main hero title in Romanian
     */
    mainTitleRo?: string | null;
    /**
     * Main hero title in English
     */
    mainTitleEn?: string | null;
    /**
     * Main hero title in Hebrew
     */
    mainTitleHe?: string | null;
    /**
     * Hero subtitle in Romanian
     */
    subtitleRo?: string | null;
    /**
     * Hero subtitle in English
     */
    subtitleEn?: string | null;
    /**
     * Hero subtitle in Hebrew
     */
    subtitleHe?: string | null;
    /**
     * Hero background image
     */
    backgroundImage?: (string | null) | Media;
    breadcrumbs?:
      | {
          labelRo?: string | null;
          labelEn?: string | null;
          labelHe?: string | null;
          href?: string | null;
          /**
           * Is this the current page?
           */
          isActive?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        isActive?: T;
        mainHeadingRo?: T;
        mainHeadingEn?: T;
        mainHeadingHe?: T;
        ctaButton?:
          | T
          | {
              textRo?: T;
              textEn?: T;
              textHe?: T;
              link?: T;
            };
        projectNameRo?: T;
        projectNameEn?: T;
        projectNameHe?: T;
        projectSubtitleRo?: T;
        projectSubtitleEn?: T;
        projectSubtitleHe?: T;
        backgroundImage?: T;
      };
  featuresSection?:
    | T
    | {
        isActive?: T;
        projectNameRo?: T;
        projectNameEn?: T;
        projectNameHe?: T;
        villaCount?: T;
        villaCountTextRo?: T;
        villaCountTextEn?: T;
        villaCountTextHe?: T;
        mainHeadingRo?: T;
        mainHeadingEn?: T;
        mainHeadingHe?: T;
        accentTextRo?: T;
        accentTextEn?: T;
        accentTextHe?: T;
        subHeadingRo?: T;
        subHeadingEn?: T;
        subHeadingHe?: T;
        detailsTextRo?: T;
        detailsTextEn?: T;
        detailsTextHe?: T;
        exteriorImage?: T;
        interiorImage?: T;
        detailsLink?: T;
      };
  featuresOverviewSection?:
    | T
    | {
        isActive?: T;
        titleRo?: T;
        titleEn?: T;
        titleHe?: T;
        featureItems?:
          | T
          | {
              order?: T;
              icon?: T;
              titleRo?: T;
              titleEn?: T;
              titleHe?: T;
              descriptionRo?: T;
              descriptionEn?: T;
              descriptionHe?: T;
              id?: T;
            };
        backgroundImage?: T;
        backgroundImageAltRo?: T;
        backgroundImageAltEn?: T;
        backgroundImageAltHe?: T;
      };
  benefitsSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        benefits?:
          | T
          | {
              benefitRo?: T;
              benefitEn?: T;
              benefitHe?: T;
              id?: T;
            };
        mainImage?: T;
        backgroundColor?: T;
        textColor?: T;
      };
  faqSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        mainHeadingRo?: T;
        mainHeadingEn?: T;
        mainHeadingHe?: T;
        faqItems?:
          | T
          | {
              questionRo?: T;
              questionEn?: T;
              questionHe?: T;
              answerRo?: T;
              answerEn?: T;
              answerHe?: T;
              id?: T;
            };
        backgroundImage?: T;
      };
  contactSection?:
    | T
    | {
        isActive?: T;
        formTitleRo?: T;
        formTitleEn?: T;
        formTitleHe?: T;
        nameFieldRo?: T;
        nameFieldEn?: T;
        nameFieldHe?: T;
        emailFieldRo?: T;
        emailFieldEn?: T;
        emailFieldHe?: T;
        phoneFieldRo?: T;
        phoneFieldEn?: T;
        phoneFieldHe?: T;
        messageFieldRo?: T;
        messageFieldEn?: T;
        messageFieldHe?: T;
        submitButtonRo?: T;
        submitButtonEn?: T;
        submitButtonHe?: T;
        backgroundImage?: T;
      };
  gallerySection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        sectionSubtitleRo?: T;
        sectionSubtitleEn?: T;
        sectionSubtitleHe?: T;
        galleryImages?:
          | T
          | {
              image?: T;
              caption?:
                | T
                | {
                    captionRo?: T;
                    captionEn?: T;
                    captionHe?: T;
                  };
              order?: T;
              id?: T;
            };
        enableLightbox?: T;
      };
  imageGallerySection?:
    | T
    | {
        isActive?: T;
        mainTitleRo?: T;
        mainTitleEn?: T;
        mainTitleHe?: T;
        subtitleRo?: T;
        subtitleEn?: T;
        subtitleHe?: T;
        descriptionRo?: T;
        descriptionEn?: T;
        descriptionHe?: T;
        images?:
          | T
          | {
              image?: T;
              caption?:
                | T
                | {
                    captionRo?: T;
                    captionEn?: T;
                    captionHe?: T;
                  };
              order?: T;
              id?: T;
            };
        enableLightbox?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-us-page_select".
 */
export interface AboutUsPageSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        isActive?: T;
        mainTitleRo?: T;
        mainTitleEn?: T;
        mainTitleHe?: T;
        subtitleRo?: T;
        subtitleEn?: T;
        subtitleHe?: T;
        backgroundImage?: T;
        breadcrumbs?:
          | T
          | {
              labelRo?: T;
              labelEn?: T;
              labelHe?: T;
              href?: T;
              isActive?: T;
              id?: T;
            };
      };
  aboutContentSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        mainHeadingRo?: T;
        mainHeadingEn?: T;
        mainHeadingHe?: T;
        contentParagraphs?:
          | T
          | {
              paragraphRo?: T;
              paragraphEn?: T;
              paragraphHe?: T;
              id?: T;
            };
        images?:
          | T
          | {
              image?: T;
              altTextRo?: T;
              altTextEn?: T;
              altTextHe?: T;
              order?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "villa-complex-page_select".
 */
export interface VillaComplexPageSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        isActive?: T;
        mainTitleRo?: T;
        mainTitleEn?: T;
        mainTitleHe?: T;
        subtitleRo?: T;
        subtitleEn?: T;
        subtitleHe?: T;
        backgroundImage?: T;
        breadcrumbs?:
          | T
          | {
              labelRo?: T;
              labelEn?: T;
              labelHe?: T;
              href?: T;
              isActive?: T;
              id?: T;
            };
      };
  villaComplexContentSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        mainHeadingRo?: T;
        mainHeadingEn?: T;
        mainHeadingHe?: T;
        contentParagraphs?:
          | T
          | {
              paragraphRo?: T;
              paragraphEn?: T;
              paragraphHe?: T;
              id?: T;
            };
        images?:
          | T
          | {
              image?: T;
              altTextRo?: T;
              altTextEn?: T;
              altTextHe?: T;
              order?: T;
              id?: T;
            };
      };
  floorPlansSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        sectionSubtitleRo?: T;
        sectionSubtitleEn?: T;
        sectionSubtitleHe?: T;
        sectionDescriptionRo?: T;
        sectionDescriptionEn?: T;
        sectionDescriptionHe?: T;
        villas?:
          | T
          | {
              villaType?: T;
              nameRo?: T;
              nameEn?: T;
              nameHe?: T;
              floorPlans?:
                | T
                | {
                    order?: T;
                    floorNameRo?: T;
                    floorNameEn?: T;
                    floorNameHe?: T;
                    floorPlanImage?: T;
                    floorPlanImageAltRo?: T;
                    floorPlanImageAltEn?: T;
                    floorPlanImageAltHe?: T;
                    builtArea?: T;
                    usableArea?: T;
                    builtAreaLabelRo?: T;
                    builtAreaLabelEn?: T;
                    builtAreaLabelHe?: T;
                    usableAreaLabelRo?: T;
                    usableAreaLabelEn?: T;
                    usableAreaLabelHe?: T;
                    roomDetails?:
                      | T
                      | {
                          roomNameRo?: T;
                          roomNameEn?: T;
                          roomNameHe?: T;
                          roomArea?: T;
                          id?: T;
                        };
                    pdfDownload?:
                      | T
                      | {
                          buttonTextRo?: T;
                          buttonTextEn?: T;
                          buttonTextHe?: T;
                          pdfFile?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
      };
  facilitiesSection?:
    | T
    | {
        isActive?: T;
        sectionTitleRo?: T;
        sectionTitleEn?: T;
        sectionTitleHe?: T;
        backgroundImage?: T;
        backgroundImageAltRo?: T;
        backgroundImageAltEn?: T;
        backgroundImageAltHe?: T;
        facilities?:
          | T
          | {
              order?: T;
              titleRo?: T;
              titleEn?: T;
              titleHe?: T;
              descriptionRo?: T;
              descriptionEn?: T;
              descriptionHe?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locationPage_select".
 */
export interface LocationPageSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        backgroundImage?: T;
        breadcrumbs?:
          | T
          | {
              homeTextRo?: T;
              homeTextEn?: T;
              homeTextHe?: T;
              currentPageTextRo?: T;
              currentPageTextEn?: T;
              currentPageTextHe?: T;
              href?: T;
            };
        titleRo?: T;
        titleEn?: T;
        titleHe?: T;
        subtitleRo?: T;
        subtitleEn?: T;
        subtitleHe?: T;
      };
  locationSection?:
    | T
    | {
        address?: T;
        decorativeTextRo?: T;
        decorativeTextEn?: T;
        decorativeTextHe?: T;
        headingRo?: T;
        headingEn?: T;
        headingHe?: T;
        descriptionRo?: T;
        descriptionEn?: T;
        descriptionHe?: T;
        nearbyPlaces?:
          | T
          | {
              nameRo?: T;
              nameEn?: T;
              nameHe?: T;
              distance?: T;
              id?: T;
            };
        ctaButton?:
          | T
          | {
              textRo?: T;
              textEn?: T;
              textHe?: T;
              link?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-page_select".
 */
export interface GalleryPageSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        isActive?: T;
        mainTitleRo?: T;
        mainTitleEn?: T;
        mainTitleHe?: T;
        subtitleRo?: T;
        subtitleEn?: T;
        subtitleHe?: T;
        backgroundImage?: T;
        breadcrumbs?:
          | T
          | {
              labelRo?: T;
              labelEn?: T;
              labelHe?: T;
              href?: T;
              isActive?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style?: ('info' | 'warning' | 'error' | 'success') | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}